/*
 * InterRingClusterTree.h
 *
 *  Created on: Sep 10, 2009
 *      Ported by Zaixian Xie
 */

/*
 * Class InterRingClusterTree represents a dimension cluster tree.
 * It is generated by the class DimTreeOperator.
 */

#ifndef INTERRINGCLUSTERTREE_H_
#define INTERRINGCLUSTERTREE_H_

#include "data/Data.h"
#include <vector>

class LinkList;
class InterRingCluster;

class InterRingClusterTree : public Data {
public:
	InterRingClusterTree();
	virtual ~InterRingClusterTree();

public:

	//    char *dim_cluster_file; //file according to which the tree is built;
	//	this is the entry point of the tree structure;
    InterRingCluster *root;  //root of the tree;
	int max_level;  //max level of the tree;
    double unit_angle;  //angle responds to one dimension on interRing of this tree;
    double mini_angle;  //the minimum angle a node should keep;
	//colormap *CMAP;

    // The pointer to the current dimension list chosen by the user
    // This list is saved in the DimRPipeline.  This class has only the reference to it.
	LinkList* current_list;

public:
    void rotate(double degree);
	//set level for every node in the tree, find the max_level of the tree
	void resetLevels();

    void resetEntries();

	//set start_angles and sweep_angles for all the nodes
	void resetAngles();

	//reset color of all nodes of the tree
	void resetColors();

    //reorder
    void reorder();

	//void resetCurrentList();

    virtual void resetSelection();

	InterRingCluster* findNodeAccordingLevelAndAngle(int level, double angle);

	InterRingCluster* findNodeAccordingLevelAndAngle(int level, double angle, bool &start, bool &end, bool &in);

    double getDistance(InterRingCluster *node_1, InterRingCluster *node_2);

protected:
	//construct the dim cluster tree according to the arrays;
	bool constructInterRingClusterTree(int num_nodes, std::vector<InterRingCluster *> nodes, std::vector<int> parent_ids);
};

#endif /* INTERRINGCLUSTERTREE_H_ */
